(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{386:function(e,t,a){e.exports=a.p+"assets/img/canvas.971cb020.png"},419:function(e,t,a){"use strict";a.r(t);var s=a(11),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"gaming"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gaming"}},[e._v("#")]),e._v(" Gaming")]),e._v(" "),s("h2",{attrs:{id:"unity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unity"}},[e._v("#")]),e._v(" Unity")]),e._v(" "),s("p",[e._v("MetaMask SDK for Unity")]),e._v(" "),s("h3",{attrs:{id:"how-it-works"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works"}},[e._v("#")]),e._v(" "),s("strong",[e._v("How it works")])]),e._v(" "),s("p",[e._v("You can import the MetaMask SDK into your Unity game to enable users to easily connect with their MetaMask Mobile wallet.")]),e._v(" "),s("p",[e._v("The SDK will render a QR code in the UI which users can scan with their MetaMask Mobile app. Now you can use all the "),s("RouterLink",{attrs:{to:"/guide/guide/ethereum-provider.html"}},[s("code",[e._v("ethereum")]),e._v(" methods available")]),e._v(" right from your game!")],1),e._v(" "),s("h3",{attrs:{id:"getting-started"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Getting started")])]),e._v(" "),s("h4",{attrs:{id:"_1-install"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-install"}},[e._v("#")]),e._v(" 1. Install")]),e._v(" "),s("p",[e._v("To install the module, you simply have to "),s("a",{attrs:{href:"https://c0f4f41c-2f55-4863-921b-sdk-docs.github.io/downloads/metamask-unity-sdk-v.0.0.1.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v("download the package"),s("OutboundLink")],1),e._v(" and extract it.")]),e._v(" "),s("p",[e._v("Now, you need to import it via the "),s("strong",[e._v("Package Manager")]),e._v('. To do that, go to the Window menu > Package Manager. Select the + and "Add Package from Disk," then open the folder where you have extracted the package, select the '),s("code",[e._v("package.json")]),e._v(' file and select "Open". You should see the '),s("code",[e._v("MetaMask SDK")]),e._v(" package now listed in the project packages.")]),e._v(" "),s("h4",{attrs:{id:"_2-add-the-metamasksdkqrcodeimage-prefab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-add-the-metamasksdkqrcodeimage-prefab"}},[e._v("#")]),e._v(" 2. Add the MetaMaskSDKQRCodeImage prefab")]),e._v(" "),s("p",[e._v("The first thing to do is to create a "),s("strong",[e._v("canvas")]),e._v(" in your scene and add the "),s("strong",[e._v("MetaMaskSDKQRCodeImage")]),e._v(" prefab to it. It is located in the package directory > Runtime folder.")]),e._v(" "),s("p",[e._v("This is a "),s("code",[e._v("Raw Image")]),e._v(" that is used by the connect script to display the QRCode that needs to be scanned by MetaMask mobile app to establish the connection.")]),e._v(" "),s("p",[e._v("You should have something like that:"),s("br"),e._v(" "),s("img",{attrs:{src:a(386),width:"300"}})]),e._v(" "),s("h4",{attrs:{id:"_3-prompt-the-qr-code-for-users-to-scan-with-metamask-mobile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-prompt-the-qr-code-for-users-to-scan-with-metamask-mobile"}},[e._v("#")]),e._v(" 3. Prompt the QR Code for users to scan with MetaMask Mobile")]),e._v(" "),s("p",[e._v("In order to connect your application, you can call "),s("code",[e._v("MMSDK.ethereum.connect")]),e._v(" with your dapp information like so:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('var dappMetadata = new MMSDK.DappMetadata\n    {\n        name = "myapp",\n        url = "myapp.com"\n    };\n\n// This is the same as calling "eth_requestAccounts"\nvar response = await MMSDK.ethereum.connect(dappMetadata);\n')])])]),s("p",[e._v("This will render the QRCode in the UI for your users to scan with MetaMask Mobile. After user scan this QR code, a connect screen will appear in MetaMask Mobile where the user can now approve the connection with your game.")]),e._v(" "),s("h4",{attrs:{id:"_4-you-can-now-call-any-ethereum-provider-method"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-you-can-now-call-any-ethereum-provider-method"}},[e._v("#")]),e._v(" 4. You can now call any ethereum provider method")]),e._v(" "),s("p",[e._v("Once the connection has been established, you are now able to call any "),s("code",[e._v("ethereum")]),e._v(" method listed on the "),s("RouterLink",{attrs:{to:"/guide/guide/ethereum-provider.html"}},[e._v("the Ethereum Provider API")])],1),e._v(" "),s("p",[e._v("Here's a simple example of a "),s("code",[e._v("request")]),e._v(" method, specifically an "),s("code",[e._v("eth_chainId")]),e._v(" one:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('var requestChainId = new MMSDK.EthereumRequest\n    {\n        method = "eth_chainId",\n        @params = new string[] { }\n    };\n\nvar responseChainId = await MMSDK.ethereum.request(requestChainId);\n')])])]),s("h3",{attrs:{id:"available-prefabs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#available-prefabs"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Available Prefabs")])]),e._v(" "),s("p",[e._v("Here's the list of the available prefabs:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("MetaMaskSDKQRCodeImage")]),e._v(" (mandatory): this is the only "),s("strong",[e._v("mandatory")]),e._v(" prefab and it's a "),s("code",[e._v("Raw Image")]),e._v(" that is used to display the connection QRCode")]),e._v(" "),s("li",[s("strong",[e._v("ButtonConnect")]),e._v(": a sample button with the "),s("code",[e._v("ConnectButton")]),e._v(' script attached to it and called on "on click" event')]),e._v(" "),s("li",[s("strong",[e._v("ButtonSendTransaction")]),e._v(": a sample button with the "),s("code",[e._v("SendTransactionButton")]),e._v(' script attached to it and called on "on click" event')]),e._v(" "),s("li",[s("strong",[e._v("ButtonSign")]),e._v(": a sample button with the "),s("code",[e._v("SignButton")]),e._v(' script attached to it and called on "on click" event')])]),e._v(" "),s("p",[s("strong",[e._v("MetaMaskSDKQRCodeImage")]),e._v(" is mandatory.")]),e._v(" "),s("h3",{attrs:{id:"package-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package-structure"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Package Structure")])]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("Documentation")]),e._v(": contains the documentation")]),e._v(" "),s("li",[s("strong",[e._v("Packages")]),e._v(": contains some of the packages that could not be imported automatically. In particular the "),s("code",[e._v("SocketIO")]),e._v(" module")]),e._v(" "),s("li",[s("strong",[e._v("Plugins")]),e._v(": contains the plugins needed by the package. In particular the cryptographic library (BouncyCastle)")]),e._v(" "),s("li",[s("strong",[e._v("Runtime")]),e._v(": contains the main scripts to be used in your project. You can find a more detailed description of those script below.")]),e._v(" "),s("li",[s("strong",[e._v("Samples")]),e._v(": contains a test application scene that can be used as a referral for your project")]),e._v(" "),s("li",[s("strong",[e._v("UserSettings")]),e._v(": contains user settings")]),e._v(" "),s("li",[s("strong",[e._v("CHANGELOG.md")]),e._v(": the package changelog")]),e._v(" "),s("li",[s("strong",[e._v("LICENSE.md")]),e._v(": the package license")]),e._v(" "),s("li",[s("strong",[e._v("package.json")]),e._v(": the json file describing the package")]),e._v(" "),s("li",[s("strong",[e._v("README.md")]),e._v(": this file")]),e._v(" "),s("li",[s("strong",[e._v("Third Party Notices.md")]),e._v(": third party notices")])]),e._v(" "),s("h3",{attrs:{id:"runtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runtime"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Runtime")])]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("Runtime")]),e._v(" folder contains the cs scripts that you need to import or use in your script for your project.")]),e._v(" "),s("h4",{attrs:{id:"msdk-cs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msdk-cs"}},[e._v("#")]),e._v(" "),s("strong",[e._v("MSDK.cs")])]),e._v(" "),s("p",[e._v("This is the main SDK class of the package.")]),e._v(" "),s("h4",{attrs:{id:"msdk-ethereum-cs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msdk-ethereum-cs"}},[e._v("#")]),e._v(" "),s("strong",[e._v("MSDK_Ethereum.cs")])]),e._v(" "),s("p",[e._v("This gives your project access to the "),s("code",[e._v("ethereum")]),e._v(" method.")]),e._v(" "),s("h4",{attrs:{id:"msdk-keyexchange-cs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msdk-keyexchange-cs"}},[e._v("#")]),e._v(" "),s("strong",[e._v("MSDK_KeyExchange.cs")])]),e._v(" "),s("p",[e._v("This class is used to establish a secure connection between your project application and the MetaMask Mobile app.")]),e._v(" "),s("h4",{attrs:{id:"msdk-ecdh-cs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#msdk-ecdh-cs"}},[e._v("#")]),e._v(" "),s("strong",[e._v("MSDK_ECDH.cs")])]),e._v(" "),s("p",[e._v("This class has the cryptographic methods used for the initial secure key exchange and the encryption/decryption methods used to secure the communication between your project application and MetaMask mobile app.")]),e._v(" "),s("h4",{attrs:{id:"qrcodecube-cs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qrcodecube-cs"}},[e._v("#")]),e._v(" "),s("strong",[e._v("QRCodeCube.cs")])]),e._v(" "),s("p",[e._v("This is an example script used by the sample scene. This QRCode cube is used to show the QR Code that the user has to scan with the MetaMask mobile app in order to establish the connection.")]),e._v(" "),s("h4",{attrs:{id:"connectbutton-cs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connectbutton-cs"}},[e._v("#")]),e._v(" "),s("strong",[e._v("ConnectButton.cs")])]),e._v(" "),s("p",[e._v("This is an example script used by the sample scene and shows you how to establish the first connection between your appliction and the MetaMask mobile app.")]),e._v(" "),s("h4",{attrs:{id:"signbutton-cs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#signbutton-cs"}},[e._v("#")]),e._v(" "),s("strong",[e._v("SignButton.cs")])]),e._v(" "),s("p",[e._v("This is an example script used by the sample scene and shows you how to sign a message sent from your appliction with the MetaMask mobile app.")]),e._v(" "),s("h4",{attrs:{id:"sendtransactionbutton-cs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sendtransactionbutton-cs"}},[e._v("#")]),e._v(" "),s("strong",[e._v("SendTransactionButton.cs")])]),e._v(" "),s("p",[e._v("This is an example script used by the sample scene and shows you how to request the sending of a transaction sent from your application to the MetaMask mobile app.")]),e._v(" "),s("h3",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Examples")])]),e._v(" "),s("ul",[s("li",[e._v("The package comes with a sample scene that can be found in "),s("code",[e._v("Samples > TestApplication > SampleScene")]),e._v(". It uses all the available prefabs and scripts provided so that you can have an idea of how to use them.")])]),e._v(" "),s("h3",{attrs:{id:"recordings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#recordings"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Recordings")])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://recordit.co/QN196nsR1d",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unity game"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"unreal-engine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unreal-engine"}},[e._v("#")]),e._v(" Unreal Engine")]),e._v(" "),s("p",[e._v("Coming soon. We are working on a MetaMask SDK for Unreal Engine and will post updates soon.")])])}),[],!1,null,null,null);t.default=o.exports}}]);