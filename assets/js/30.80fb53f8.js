(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{423:function(t,e,a){"use strict";a.r(e);var n=a(11),o=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" Options")]),t._v(" "),a("p",[t._v("The MetaMask JS SDK takes several options, for example:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" options "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("injectProvider")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("communicationLayerPreference")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'webrtc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MMSDK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MetaMaskSDK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Check the full list of options:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Option name")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Type")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Default value")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("dappMetadata")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v('{name: "My Dapp", url: "https://mydapp.com"}')])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("undefined")])]),t._v(" "),a("td",[t._v("dappMetadata is only required for non-web dapps (for example React Native and Unity)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("injectProvider")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("true")])]),t._v(" "),a("td",[t._v("Note: will not inject in NodeJS or React Native as the window object is unavailable.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("forceInjectProvider")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("false")])]),t._v(" "),a("td",[t._v("Forces injection even if another provider is already present on the window object.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("forceDeleteProvider")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("false")])]),t._v(" "),a("td",[t._v("Forces deletion of a provider that exists on a window.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("checkInstallationImmediately")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("false")])]),t._v(" "),a("td",[t._v("The SDK checks if MetaMask is installed when a call to "),a("code",[t._v("eth_requestAccounts")]),t._v(" is made. When "),a("code",[t._v("true")]),t._v(", it checks before any call is made.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("checkInstallationOnAllCalls")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("false")])]),t._v(" "),a("td",[t._v("Normally checked when a call to "),a("code",[t._v("eth_requestAccounts")]),t._v(" is made. When "),a("code",[t._v("true")]),t._v(", it checks on all calls.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("shouldShimWeb3")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("true")])]),t._v(" "),a("td",[t._v("Set as "),a("code",[t._v("true")]),t._v(" if "),a("code",[t._v("window.web3")]),t._v(" should be shimmed for legacy compatibility purposes. "),a("RouterLink",{attrs:{to:"/provider-migration.html#replacing-window-web3"}},[t._v("More info")])],1)]),t._v(" "),a("tr",[a("td",[a("code",[t._v("preferDesktop")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("false")])]),t._v(" "),a("td",[t._v("For a web dapp running on a desktop browser without a MetaMask extension, the SDK gives the option to connect with a MetaMask Mobile wallet via a QR code. When "),a("code",[t._v("true")]),t._v(", the SDK guides the user to install the MetaMask extension instead.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("openDeeplink")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("(deeplinkUrl: string) => void")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("undefined")])]),t._v(" "),a("td",[t._v("Platforms open deep links differently. e.g, web: "),a("code",[t._v("window.open")]),t._v(" versus React Native: "),a("code",[t._v("Linking.open")]),t._v(". This function retrieves the deep link url and allows developers to customize how it opens.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("getUniversalLink")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("() => string")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("undefined")])]),t._v(" "),a("td",[t._v("Get the universal link that is presented on the QR Code (web) and deeplinks (mobile). This makes it easier to enable users to connect with backend code.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("communicationLayerPreference")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v('"socket" or "webrtc"')])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("socket")])]),t._v(" "),a("td",[t._v("Defines the communication library that the dapp and MetaMask wallet use to communicate with each other. Waku or another similar decentralized communication layer solution coming soon.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("webRTCLib")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("WebRTC Lib")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("undefined")])]),t._v(" "),a("td",[t._v("Not installed on the SDK by default. Check the React Native section to see how to install it.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("WalletConnectInstance")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("WalletConnect Lib")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("undefined")])]),t._v(" "),a("td",[t._v("Another way of connecting a dapp to MetaMask. Not installed by default. Check "),a("a",{attrs:{href:"https://docs.walletconnect.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(" on how to install it.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("forceRestartWalletConnect")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("false")])]),t._v(" "),a("td",[t._v("Set "),a("code",[t._v("forceRestartWalletConnect")]),t._v(" to "),a("code",[t._v("true")]),t._v(" to kill the previous WalletConnect session and start another one.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("transports")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("['websocket', 'polling']")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("undefined")])]),t._v(" "),a("td",[t._v("Used to set the preference on socket.io transports to 'use'. Check the socket.io "),a("a",{attrs:{href:"https://socket.io/docs/v4/",target:"_blank",rel:"noopener noreferrer"}},[t._v("documentation"),a("OutboundLink")],1),t._v(" for more details.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("timer")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("BackgroundTimer")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("undefined")])]),t._v(" "),a("td",[t._v("Used by React Native apps to keep the app alive while in the background using "),a("code",[t._v("react-native-background-timer")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("enableDebug")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("true")])]),t._v(" "),a("td",[t._v("Enebles/disables the sending of debugging information to the "),a("code",[t._v("socket.io")]),t._v(" server. It defaults to "),a("code",[t._v("true")]),t._v(" for beta version of the SDK. It'll default to "),a("code",[t._v("false")]),t._v(" on production ones.")])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If your project is a web app and "),a("code",[t._v("injectProvider")]),t._v(" is "),a("code",[t._v("true")]),t._v(", then the "),a("code",[t._v("ethereum")]),t._v(" object should be available in "),a("code",[t._v("window.ethereum")]),t._v(".")])])])}),[],!1,null,null,null);e.default=o.exports}}]);