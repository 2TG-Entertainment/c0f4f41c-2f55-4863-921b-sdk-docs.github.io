(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{388:function(t,a,e){t.exports=e.p+"assets/img/unity_tutorial_video.b8df28e4.png"},429:function(t,a,e){"use strict";e.r(a);var s=e(11),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"metamask-unity-sdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metamask-unity-sdk"}},[t._v("#")]),t._v(" Metamask Unity SDK")]),t._v(" "),s("p",[t._v("​\nThe MetaMask SDK for Unity.\n​")]),t._v(" "),s("h2",{attrs:{id:"how-it-works"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works"}},[t._v("#")]),t._v(" How it works")]),t._v(" "),s("p",[t._v("​\nAs a developer you can import the MetaMask SDK into your Unity game to enable users to easily connect with their MetaMask Mobile wallet, The supported platforms are macOS, Windows, Linux, IOS, Android & WebGL\n​\nThe SDK renders a QR code in the UI via a dedicated prefab which players can scan with their MetaMask Mobile app, we also support deep-linking on mobile platforms. Now you can use all the "),s("RouterLink",{attrs:{to:"/guide/ethereum-provider.html"}},[s("code",[t._v("ethereum")]),t._v(" methods available")]),t._v(" right from your game which you can learn more about in the above link.\n​")],1),t._v(" "),s("h2",{attrs:{id:"getting-started"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[t._v("#")]),t._v(" Getting started")]),t._v(" "),s("p",[t._v("​\nThis is a quick video tutorial explaining how to install and use MetaMask Unity SDK")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://drive.google.com/file/d/1PkYDkvFh2WAmOrDskE1VuYFrE7Qk3cs3/view?usp=sharing",title:"Metamask Unity SDK Tutorial",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:e(388),width:"50%"}}),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"_1-install"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-install"}},[t._v("#")]),t._v(" 1. Install")]),t._v(" "),s("p",[t._v("​\nTo install the module, you first have to download the package from here: "),s("a",{attrs:{href:"https://drive.google.com/u/0/uc?id=1ArTJvKIZXK5vkUOM3cgr0t0NspenWRU9&export=download",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unity SDK Package"),s("OutboundLink")],1),t._v(".\n​\nNow, you need to import it via the "),s("strong",[t._v("Package Manager")]),t._v('. To do that, go to the Window menu > Package Manager. Select "My Assets" then select the "MetaMask Unity SDK" and click "Install", You should see the '),s("code",[t._v("MetaMask SDK")]),t._v(" package now listed in the project packages and be able to interface with it and its examples in the scene.\n​")]),t._v(" "),s("h2",{attrs:{id:"prerequisites"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[t._v("#")]),t._v(" Prerequisites")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("ul",[s("li",[t._v("TextMesh Pro(If you do not have TMP installed you will be prompted to install it by the unity editor automatically, N.B* If you choose this path text will not appear until your first repaint)\n​")])]),t._v(" "),s("h3",{attrs:{id:"_2-initialization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-initialization"}},[t._v("#")]),t._v(" 2. Initialization")]),t._v(" "),s("p",[t._v("​\nThe main class you will be interfacing with is called "),s("code",[t._v("MetaMaskWallet")]),t._v(" it handles the connection to the users wallet as well as processing the requests to it via a socket.io implementation, in order to use it inside Unity, you must attach the component called "),s("code",[t._v("MetaMaskUnity")]),t._v(" to a gameobject within the editor, this component is a singleton and you can use its "),s("code",[t._v("Instance")]),t._v(" property to access the Wallet instance, but before doing any of those, you need to initialize it either manually by calling "),s("code",[t._v("Initialize();")]),t._v(":\n​")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("MetaMaskUnity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Initialize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("​\nOr just making sure that "),s("code",[t._v("Initialize On Start")]),t._v(" is checked on the component within the editor, and then this will let you to enable you to make calls to the users wallet using "),s("RouterLink",{attrs:{to:"/guide/ethereum-provider.html"}},[s("code",[t._v("ethereum")]),t._v(" methods available")]),t._v(" as you would expect in a traditional development environment.\n​\nThis will initialize the Wallet instance and then it becomes accessible from "),s("code",[t._v("MetaMaskUnity.Instance.Wallet")]),t._v(".\n​")],1),t._v(" "),s("h3",{attrs:{id:"_3-connection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-connection"}},[t._v("#")]),t._v(" 3. Connection")]),t._v(" "),s("p",[t._v("​\nOnce the wallet is now prepared and initialized, now you need to connect to the MetaMask app, all you need to do is to call the "),s("code",[t._v("Connect")]),t._v(" method on the wallet instance like so:\n​")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" wallet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MetaMaskUnity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Wallet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwallet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("​\nThen you can also subscribe to the "),s("code",[t._v("OnWalletConnected")]),t._v(" callback on the wallet instance to be notified once the wallet is connected:\n​")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("wallet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WalletConnected "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" OnWalletConnected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("OnWalletConnected")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" sender"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventArgs")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Wallet is connected"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("​\nYou can also use the "),s("code",[t._v("Connect")]),t._v(" method from "),s("code",[t._v("MetaMaskUnity")]),t._v(" that just delegates the call to the Wallet instance:\n​")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("MetaMaskUnity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("​\nThere are a variety of sample buttons included inside the package that you can use that call this method when clicked, these are provided as a convenience to you to get a kickstart with your project.\n​\nOnce the connection request is made, a QR code will be generated, and based on the transport you're using, which is "),s("code",[t._v("Unity UI")]),t._v(" by default, either spawns a new Canvas that contains the QR code or the "),s("code",[t._v("MetaMaskUnityUIQRImage")]),t._v(" generates the QR code when the connection is requested, so if you want to use the latter, make sure to add an instance of the "),s("code",[t._v("MetaMaskUnityUIQRImage")]),t._v(" component to the scene with its fields provided, the transport field is required too if you want to use it isolated from the canvas that is spawned by the transport, then it'll generate the QR code for you.\n​")]),t._v(" "),s("h3",{attrs:{id:"_4-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-usage"}},[t._v("#")]),t._v(" 4. Usage")]),t._v(" "),s("p",[t._v("​\nNow you can make requests to the wallet once it is authorized, you'll notice that when the buttons become interactable or the "),s("code",[t._v("WalletAuthorized")]),t._v(" event is fired:\n​")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" wallet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MetaMaskUnity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Wallet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwallet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WalletAuthorized "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" OnWalletAuthorized"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n"),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("OnWalletAuthorized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" sender"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventArgs")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Deebug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Wallet is authorized"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("​\nYou can now call any Ethereum request on the wallet by calling "),s("code",[t._v("wallet.Request(myRequest);")]),t._v(", here is a sample transaction request:\n​")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" wallet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MetaMaskUnity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Wallet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" transactionParams "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MetaMaskTranscation")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    To "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xd0059fB234f15dFA9371a7B45c09d451a2dd2B5a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    From "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MetaMaskUnity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Wallet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SelectedAddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0x0"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" request "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MetaMaskEthereumRequest")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Method "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eth_sendTransaction"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Parameters "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MetaMaskTranscation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" transactionParams "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" wallet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("​")]),t._v(" "),s("h3",{attrs:{id:"_5-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-config"}},[t._v("#")]),t._v(" 5. Config")]),t._v(" "),s("p",[t._v("​\nYou can customize the default configuration or creating your own config:\n​")]),t._v(" "),s("h4",{attrs:{id:"edit-default-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#edit-default-config"}},[t._v("#")]),t._v(" Edit Default Config")]),t._v(" "),s("p",[t._v("​\nTo edit the default config you can do so by either opening the setup window through the "),s("code",[t._v("Window > MetaMask > Setup")]),t._v(" menu item, or by opening the "),s("code",[t._v("MetaMaskConfig")]),t._v(" asset in the project window, then you can edit the fields and save the changes.\n​")]),t._v(" "),s("h4",{attrs:{id:"create-new-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-new-config"}},[t._v("#")]),t._v(" Create New Config")]),t._v(" "),s("p",[t._v("​\nTo create a new config, simply right-click on the project window and go to "),s("code",[t._v("MetaMask > Config")]),t._v(" menu to create a new config, give it a name and then use it when initializing the "),s("code",[t._v("MetaMaskUnity")]),t._v(" instance.\n​")]),t._v(" "),s("h2",{attrs:{id:"api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),s("p",[t._v("​\nHere is a quick overview of the APIs from the most important classes.\n​")]),t._v(" "),s("h3",{attrs:{id:"metamaskunity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metamaskunity"}},[t._v("#")]),t._v(" MetaMaskUnity")]),t._v(" "),s("p",[t._v("​\nThis is a singleton class that you can use to access the "),s("code",[t._v("MetaMaskWallet")]),t._v(" instance which is specific to Unity.\n​")]),t._v(" "),s("h4",{attrs:{id:"instance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instance"}},[t._v("#")]),t._v(" Instance")]),t._v(" "),s("p",[t._v("​\nThis is the singleton instance of the "),s("code",[t._v("MetaMaskUnity")]),t._v(" class that is lazy-loaded when you access it for the first time.\n​")]),t._v(" "),s("h4",{attrs:{id:"initialize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#initialize"}},[t._v("#")]),t._v(" Initialize")]),t._v(" "),s("p",[t._v("​\nThis method initializes the "),s("code",[t._v("MetaMaskWallet")]),t._v(" instance and makes it accessible via the "),s("code",[t._v("Wallet")]),t._v(" property.\n​\nYou can also pass extra options and parameters to it to customize the wallet instance:\n​")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize using default settings")]),t._v("\nMetaMaskUnity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Initialize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize using custom transport and socket provider")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" transport "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MyCustomTransport")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" socketProvider "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MyCustomSocketProvider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMetaMaskUnity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Initialize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("transport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socketProvider"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize using custom config, transport and socket provider")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myMetaMaskConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" transport "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MyCustomTransport")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" socketProvider "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MyCustomSocketProvider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMetaMaskUnity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Initialize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" transport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socketProvider"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("​")]),t._v(" "),s("h4",{attrs:{id:"savesession"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#savesession"}},[t._v("#")]),t._v(" SaveSession")]),t._v(" "),s("p",[t._v("​\nThis method saves the current session to the persistent storage, this is useful when you want to save the session and restore it later on, this is automatically called when the application quits, but you can manually call it too.\n​")]),t._v(" "),s("h4",{attrs:{id:"loadsession"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loadsession"}},[t._v("#")]),t._v(" LoadSession")]),t._v(" "),s("p",[t._v("​\nThis method loads the session from the persistent storage, this is useful when you want to restore the session after the application quits, this is automatically called when the application starts, but you can manually call it too.\n​")]),t._v(" "),s("h3",{attrs:{id:"metamaskwallet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metamaskwallet"}},[t._v("#")]),t._v(" MetaMaskWallet")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("h4",{attrs:{id:"connect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[t._v("#")]),t._v(" Connect")]),t._v(" "),s("p",[t._v("​\nThis method connects to the MetaMask app, it will render a generated QRCode in the UI for your users to scan with the MetaMask Mobile app. After the user scan this QR code, a connect screen will appear in MetaMask Mobile where the user can now approve the connection with your game application.\n​")]),t._v(" "),s("h4",{attrs:{id:"disconnect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#disconnect"}},[t._v("#")]),t._v(" Disconnect")]),t._v(" "),s("p",[t._v("​\nThis method disconnects the user that is connected from the MetaMask app session.\n​")]),t._v(" "),s("h4",{attrs:{id:"request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#request"}},[t._v("#")]),t._v(" Request")]),t._v(" "),s("p",[t._v("​\nThis method is used to send a request to the MetaMask app, you can use it to call any "),s("code",[t._v("ethereum")]),t._v(" method listed on the "),s("RouterLink",{attrs:{to:"/guide/ethereum-provider.html"}},[t._v("the Ethereum Provider API")]),t._v(".\n​")],1),t._v(" "),s("h2",{attrs:{id:"package-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package-structure"}},[t._v("#")]),t._v(" Package Structure")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Documentation")]),t._v(": contains the documentation and link to online documentation")]),t._v(" "),s("li",[s("strong",[t._v("Editor")]),t._v(": contains the editor-only code such as Setup GUI windows, data persistence for SDK settings.")]),t._v(" "),s("li",[s("strong",[t._v("Plugins")]),t._v(": contains the plugins needed by the package. In particular the ECIES Platform runtime libraries as well as the core SDK Codebase.")]),t._v(" "),s("li",[s("strong",[t._v("Runtime")]),t._v(": contains the main scripts for the SDK that are environment agnostic, so they work fine in .NET, The "),s("code",[t._v("Runtime")]),t._v(" folder contains the C# scripts that you need to import or use in your script for your project, they provide the base implementation of the SDK, you can create your own implementation of Unity components on top of these without ever toching the premade Unity component to have total control.")]),t._v(" "),s("li",[s("strong",[t._v("Samples")]),t._v(": contains a test application scene that can be used as a referral for your project including modal popups and dynamic UI scaling.")]),t._v(" "),s("li",[s("strong",[t._v("LICENSE.md")]),t._v(": the package license")]),t._v(" "),s("li",[s("strong",[t._v("Third Party Notices.md")]),t._v(": third party notices\n​")])]),t._v(" "),s("h2",{attrs:{id:"license"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#license"}},[t._v("#")]),t._v(" License")]),t._v(" "),s("p",[t._v("​\nCheck the "),s("code",[t._v("LICENSE")]),t._v(" file for more information.")])])}),[],!1,null,null,null);a.default=n.exports}}]);